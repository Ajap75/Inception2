version: "3.8" # Version du format Docker Compose utilisé (ici, la 3.8)

######################
# DÉFINITION DES SERVICES
######################

services:

  ##################
  # Service NGINX
  ##################
  nginx:
    build:
      context: ./requirements/nginx     # Chemin vers le dossier contenant le Dockerfile NGINX
      dockerfile: Dockerfile            # Nom du Dockerfile (optionnel si c'est "Dockerfile" par défaut)
      args:
        DOMAIN_NAME: ${DOMAIN_NAME}
    container_name: inception-nginx     # Nom personnalisé du conteneur pour le retrouver facilement

    ports:
      - "443:443"                      # Expose le port 443 du conteneur (HTTPS) vers le port 443 de l’hôte

    volumes:
      - wordpress:/var/www/wordpress:ro  # Monte le volume WordPress en lecture seule dans le conteneur NGINX
                                         # Permet à NGINX de servir les fichiers WP sans pouvoir les modifier
      - ./requirements/nginx/conf/nginx.conf:/etc/nginx/conf.d/default.conf:ro
                                         # Monte le fichier de configuration NGINX personnalisé depuis l'hôte (en lecture seule)
                                         # Alternative : possibilite de COPY le fichier dans l'image au build

    networks:
      - inception_network               # Place NGINX sur le même réseau Docker que les autres services

    depends_on:
      - wordpress                      # Démarre ce conteneur seulement après que WordPress soit prêt

  ##################
  # Service WORDPRESS (PHP-FPM)
  ##################
  wordpress:
    build:
      context: ./requirements/wordpress
      dockerfile: Dockerfile
    container_name: inception-wordpress

    volumes:
      - wordpress:/var/www/wordpress      # Volume partagé avec NGINX, ici en lecture-écriture (WP peut écrire/éditer)
    
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}        # Variables d'environnement injectées (récupérées du .env)
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - WP_TITLE=${WP_TITLE}
      - WP_ADMIN=${WP_ADMIN}
      - WP_ADMIN_PWD=${WP_ADMIN_PWD}
      - WP_ADMIN_EMAIL=${WP_ADMIN_EMAIL}
      - WP_USER=${WP_USER}
      - WP_USER_PWD=${WP_USER_PWD}
      - WP_USER_EMAIL=${WP_USER_EMAIL}
      # Ces variables sont utilisées par tes scripts d'initialisation WP pour paramétrer le site

    networks:
      - inception_network

    depends_on:
      - mariadb                         # Lance ce service seulement après MariaDB

  ##################
  # Service MARIADB (Base de données)
  ##################
  mariadb:
    build:
      context: ./requirements/mariadb
      dockerfile: Dockerfile
    container_name: inception-mariadb

    volumes:
      - mariadb:/var/lib/mysql            # Volume persistant pour stocker les données SQL (bases, tables, users…)

    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}  # Mot de passe root MariaDB (injecté via .env)
      - MYSQL_DATABASE=${MYSQL_DATABASE}            # Nom de la base à créer automatiquement
      - MYSQL_USER=${MYSQL_USER}                    # Nom de l'utilisateur WP à créer
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}            # Mot de passe de l'utilisateur WP

    networks:
      - inception_network

######################
# VOLUMES DOCKER PERSISTANTS
######################

volumes:
  wordpress:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/anastruc/data/wordpress
      # Chemin sur la VM où les données du site WordPress sont stockées et persistent après reboot

  mariadb:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/anastruc/data/mariadb     # Chemin sur la VM pour la base MariaDB

######################
# RÉSEAU DOCKER COMMUN
######################

networks:
  inception_network:
    driver: bridge                           # Crée un réseau "bridge" (virtuel) pour connecter tous les services
